buildscript {
    def spring_boot_gradle_plugin = System.getProperty('VERSION_SPRING_BOOT_GRADLE_PLUGIN') ?: VERSION_SPRING_BOOT_GRADLE_PLUGIN
    dependencies {
        classpath "org.springframework.boot:spring-boot-gradle-plugin:${spring_boot_gradle_plugin}"
    }
}

plugins {
    id 'application'
    id 'idea'
    id 'io.spring.dependency-management' version '1.0.11.RELEASE'
    id 'java'
    id 'maven'
    id 'org.springframework.boot' version '2.5.4'
}

group = 'su.svn.cdc-invalidator'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '11'

static def getEnv(key, defaultValue) {
    return System.getenv(key) ?: defaultValue
}

ext.libVers = [
        debezium                        : getEnv('VERSION_DEBEZIUM', VERSION_DEBEZIUM),
        drv_org_postgresql              : getEnv('VERSION_DRV_ORG_POSTGRESQL', VERSION_DRV_ORG_POSTGRESQL),
        hibernate_validator             : getEnv('VERSION_HIBERNATE_VALIDATOR', VERSION_HIBERNATE_VALIDATOR),
        mybatis_spring_boot_starter     : getEnv('VERSION_MYBATIS_SPRING_BOOT_STARTER', VERSION_MYBATIS_SPRING_BOOT_STARTER),
        projectlombok                   : getEnv('VERSION_PROJECTLOMBOK', VERSION_PROJECTLOMBOK),
        slf4j                           : getEnv('VERSION_ORG_SLF4J_VERSION', VERSION_ORG_SLF4J_VERSION),
        spring_kafka                    : getEnv('VERSION_SPRING_KAFKA', VERSION_SPRING_KAFKA),
        google_collections              : '1.0',
        guava                           : '30.1.1-jre',
        h2_database                     : '1.4.197',
        jsr305                          : '3.0.2',
        junit                           : '5.6.0',
        junit_platform_launcher         : '1.6.0',
        mockito_core                    : '3.2.4',
]

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

dependencies {
    implementation "com.google.code.findbugs:jsr305:$libVers.jsr305"
    implementation "com.google.collections:google-collections:$libVers.google_collections"
    implementation "com.google.guava:guava:$libVers.guava"
    implementation "org.hibernate:hibernate-validator:$libVers.hibernate_validator"

    implementation "org.springframework.kafka:spring-kafka:$libVers.spring_kafka"

    implementation 'org.springframework.boot:spring-boot-starter-actuator'
    implementation 'org.springframework.boot:spring-boot-starter-web'

    implementation "io.debezium:debezium-api:$libVers.debezium"
    implementation("io.debezium:debezium-embedded:$libVers.debezium") {
        exclude group: 'org.slf4j', module: 'slf4j-log4j12'
    }
    implementation "io.debezium:debezium-connector-postgres:$libVers.debezium"

    implementation "io.lettuce:lettuce-core:6.1.5.RELEASE"

    compileOnly 'org.projectlombok:lombok'
    developmentOnly 'org.springframework.boot:spring-boot-devtools'
    annotationProcessor 'org.projectlombok:lombok'

    compileOnly "org.springframework.boot:spring-boot-configuration-processor"
    annotationProcessor "org.springframework.boot:spring-boot-configuration-processor"

    compile group: 'org.postgresql', name: 'postgresql', version: libVers.drv_org_postgresql

    runtimeOnly "org.postgresql:postgresql:$libVers.drv_org_postgresql"

    testImplementation('org.springframework.boot:spring-boot-starter-test') {
        exclude group: 'org.junit.vintage', module: 'junit-vintage-engine'
    }
    testImplementation 'org.springframework.batch:spring-batch-test'
    testImplementation "org.mockito:mockito-core:$libVers.mockito_core"
}

compileJava.inputs.files(processResources)

test {
    useJUnitPlatform()
}

repositories {
    mavenCentral()
}
